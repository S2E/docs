==========================
Coreutils Coverage Testing
==========================

The `GNU Core Utilities <https://www.gnu.org/software/coreutils/coreutils.html>`_ are the basic file, shell and text
manipulation utilities of the GNU operating system. This demo walks you through the process of using S2E to analyze the
``cat`` program and generate basic block and line coverage information.

.. contents::

Preparing the target binary
===========================

The first step is to build the coreutils package. In this tutorial, we will use version `8.26
<https://ftp.gnu.org/gnu/coreutils/coreutils-8.26.tar.xz>`_ . We will build a 32-bit version of Coreutils.

.. code-block:: console

    wget https://ftp.gnu.org/gnu/coreutils/coreutils-8.26.tar.xz
    tar zf coreutils-8.26.tar.xz

    cd coreutils-8.26
    mkdir build
    cd build
    ../configure CFLAGS="-g -m32" --prefix=$(pwd)
    make
    make install

The coreutils programs will be available in ``coreutils-8.26/build/bin``.

Setting up the test environment
===============================

Use ``s2e-env`` to create your S2E environment. Follow `these <../s2e-env.rst>`_ instructions to build a 32-bit Linux
image (from ``linux-4.9.3-i386``). Once you have an image you can create your project.

.. code-block:: console

    s2e new_project --image debian-8.7.1-i386 /path/to/coreutils-8.26/build/bin/cat @@

The ``@@`` symbol tells ``s2e-env`` to generate a bootstrap file that will run ``cat`` with a symbolic file as input.
By default this symbolic file will be a 256 byte file filled with ``null`` bytes.

For testing ``cat`` we will have to modify this symbolic file slightly. Instead of having it filled with ``null``
bytes, we will add some actual text to the file to make it more representative of using ``cat``. Open ``bootstrap.sh``
and insert the following line after the ``truncate -s 256 ${SYMB_FILE}`` line.

.. code-block:: bash

    echo "Here is some text" > ${SYMB_FILE}

In order to generate coverage information, please enable the ``TranslationBlockCoverage`` plugin in ``s2e-config.lua``.
Add the following configuration for the ``TranslationBlockCoverage`` plugin:

.. code-block:: lua

    pluginsConfig.TranslationBlockCoverage = {
        writeCoverageOnStateKill = true,
    }

Setting the ``writeCoverageOnStateKill`` option to ``true`` will generate JSON files containing translation block
coverage information. These JSON files will be used to produce the basic block and line coverage summary.

Generate code coverage
======================

Start S2E by running the ``launch-s2e.sh`` script. You may wish to leverage the multi-process mode by setting
``S2E_MAX_PROCESSES=XX`` in ``launch-s2e.sh``.

Let S2E run for approximately two minutes before killing it (e.g. via ``killall -9 qemu-system-i386``).

S2E provides a script that can automatically extract the basic block coverage and line coverage. In order to produce
code coverage information, please copy this script to the current project directory at ``projects/cat``.

The basic block coverage can be generated by simply running the following command.

.. code-block:: console

    s2e coverage -i /path/to/IDAPro cat

``s2e-env``'s ``coverage`` subcommand will run a code coverage analysis on ``s2e-last`` in the ``cat`` project,
generating a ``tbcoverage.info`` file as output. This file contains the coverage information at the basic block level.
E.g.:

.. code-block:: bash

    BB_start   BB_end    Name Touched
    0x08048fb0 0x08048fde main T
    0x08048fdf 0x08048fee main F
    0x08048fef 0x08048ffc main T
    0x08048ffd 0x0804900d main T
    0x0804900e 0x08049019 main F
    0x0804901a 0x08049025 main F

Here the label ``T`` means that the corresponding basic block has been covered, while ``F`` means it has not.

In order to generate line coverage, you have to make sure that Coreutils is compiled with ``-g`` option. Then run the following command.
To generate line coverage we can use the same ``s2e-env`` subcommand, however this time we must provide the path to the
target program's source code.

.. code-block:: console

    s2e coverage -i /path/to/IDAPro -s /path/to/coreutils-8.26/ cat

This will generate an `lcov <http://ltp.sourceforge.net/coverage/lcov.php>`_ report named ``coverage.info``. If you
have the ``lcov`` tool installed, then you can also generate an html report with the following command:

.. code-block:: console

    genhtml coverage.info --output-directory out

This will generate an html line coverage report in the ``out`` directory.
